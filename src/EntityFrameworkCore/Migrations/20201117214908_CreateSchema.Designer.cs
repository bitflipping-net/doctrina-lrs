// <auto-generated />
using System;
using Doctrina.Domain.Entities;
using Doctrina.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doctrina.Migrations
{
    [DbContext(typeof(DoctrinaDbContext))]
    [Migration("20201117214908_CreateSchema")]
    partial class CreateSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.Property<Guid>("ActivityDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descriptions")
                        .HasColumnType("ntext");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<Guid?>("InteractionActivityInteractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("ntext");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityDefinitionId");

                    b.HasIndex("InteractionActivityInteractionId");

                    b.ToTable("ActivityDefinitions");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityEntity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefinitionActivityDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("ActivityId");

                    b.HasIndex("DefinitionActivityDefinitionId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.Property<Guid>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IFI_Key")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("IFI_Value")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("PersonEntityPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgentId");

                    b.HasIndex("PersonEntityPersonId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ObjectType", "IFI_Key", "IFI_Value");

                    b.ToTable("Agents");

                    b.HasDiscriminator<string>("ObjectType").HasValue("Agent");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AttachmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SHA2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatementEntityStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubStatementEntitySubStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("Id");

                    b.HasIndex("StatementEntityStatementId");

                    b.HasIndex("SubStatementEntitySubStatementId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("API")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextActivityEntity", b =>
                {
                    b.Property<Guid>("ContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContextType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContextId", "ContextType", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ContextActivities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.Property<Guid>("ContextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Registration")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Revision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContextId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("TeamId");

                    b.ToTable("Contexts");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.DocumentEntity", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");

                    b.HasDiscriminator<string>("DocumentType").HasValue("DocumentEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.GroupMemberEntity", b =>
                {
                    b.Property<Guid>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("AgentId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase", b =>
                {
                    b.Property<Guid>("InteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectResponsesPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InteractionId");

                    b.ToTable("InteractionActivities");

                    b.HasDiscriminator<string>("InteractionType").HasValue("InteractionActivityBase");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Completion")
                        .HasColumnType("bit");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DurationTicks")
                        .HasColumnType("bigint");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.HasKey("ResultId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.Property<Guid>("StatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Stored")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("VerbId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<Guid?>("VoidingStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StatementId");

                    b.HasIndex("ActorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContextId");

                    b.HasIndex("ResultId");

                    b.HasIndex("VerbId");

                    b.HasIndex("VoidingStatementId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.SubStatementEntity", b =>
                {
                    b.Property<Guid>("SubStatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("VerbId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubStatementId");

                    b.HasIndex("ActorAgentId");

                    b.HasIndex("ContextId");

                    b.HasIndex("ResultId");

                    b.HasIndex("VerbId");

                    b.ToTable("SubStatements");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.VerbEntity", b =>
                {
                    b.Property<Guid>("VerbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Display")
                        .HasColumnType("ntext");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("VerbId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.ToTable("Verbs");
                });

            modelBuilder.Entity("Doctrina.Persistence.Configurations.Relations.ObjectRelation", b =>
                {
                    b.Property<string>("ChildObjectType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParentObjectType")
                        .HasColumnType("int");

                    b.HasKey("ChildObjectType", "ParentId", "ChildId");

                    b.ToTable("ObjectRelations");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.GroupEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.AgentEntity");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Documents.DocumentEntity");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("ActivityProfile");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Documents.DocumentEntity");

                    b.HasIndex("ActivityId")
                        .HasName("IX_Documents_ActivityId1");

                    b.HasIndex("AgentId");

                    b.HasDiscriminator().HasValue("ActivityState");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Documents.DocumentEntity");

                    b.HasIndex("AgentId")
                        .HasName("IX_Documents_AgentId1");

                    b.HasDiscriminator().HasValue("AgentProfile");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.ChoiceInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Choices")
                        .HasColumnName("ChoiceInteractionActivity_Choices")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("choice");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.FillInInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("fill-in");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.LikertInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Scale")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("likert");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.LongFillInInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("long-fill-in");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.MatchingInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Source")
                        .HasColumnType("ntext");

                    b.Property<string>("Target")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("matching");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.NumericInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("NumericInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.OtherInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("other");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.PerformanceInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Steps")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("performance");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.SequencingInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Choices")
                        .HasColumnName("Choices")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("sequencing");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.TrueFalseInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("true-false");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase", "InteractionActivity")
                        .WithMany()
                        .HasForeignKey("InteractionActivityInteractionId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityDefinitionEntity", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionActivityDefinitionId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.PersonEntity", null)
                        .WithMany("Agents")
                        .HasForeignKey("PersonEntityPersonId");

                    b.HasOne("Doctrina.Domain.Entities.PersonEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AttachmentEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.StatementEntity", null)
                        .WithMany("Attachments")
                        .HasForeignKey("StatementEntityStatementId");

                    b.HasOne("Doctrina.Domain.Entities.SubStatementEntity", null)
                        .WithMany("Attachments")
                        .HasForeignKey("SubStatementEntitySubStatementId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextActivityEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.ContextEntity", null)
                        .WithMany("ContextActivities")
                        .HasForeignKey("ContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.GroupMemberEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.GroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.GroupEntity", null)
                        .WithMany("Members")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.OwnsOne("Doctrina.Domain.Entities.ScoreEntity", "Score", b1 =>
                        {
                            b1.Property<Guid>("ResultEntityResultId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Max")
                                .HasColumnType("float");

                            b1.Property<double?>("Min")
                                .HasColumnType("float");

                            b1.Property<double?>("Raw")
                                .HasColumnType("float");

                            b1.Property<double?>("Scaled")
                                .HasColumnType("float");

                            b1.HasKey("ResultEntityResultId");

                            b1.ToTable("Results");

                            b1.WithOwner()
                                .HasForeignKey("ResultEntityResultId");
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.ContextEntity", "Context")
                        .WithMany()
                        .HasForeignKey("ContextId");

                    b.HasOne("Doctrina.Domain.Entities.ResultEntity", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Doctrina.Domain.Entities.VerbEntity", "Verb")
                        .WithMany()
                        .HasForeignKey("VerbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.StatementEntity", "VoidingStatement")
                        .WithMany()
                        .HasForeignKey("VoidingStatementId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.SubStatementEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.ContextEntity", "Context")
                        .WithMany()
                        .HasForeignKey("ContextId");

                    b.HasOne("Doctrina.Domain.Entities.ResultEntity", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Doctrina.Domain.Entities.VerbEntity", "Verb")
                        .WithMany()
                        .HasForeignKey("VerbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_Documents_Activities_ActivityId1");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .HasConstraintName("FK_Documents_Agents_AgentId1");
                });
#pragma warning restore 612, 618
        }
    }
}
